plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client") {
            runDir = "../common/run"

            if(System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        } else if (name == "data") {
            programArgs '--existing', project(":common").file("src/main/resources/").absolutePath, '--client', '--server'
        }
    }

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen {
            mod "spytoo"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.neoforged:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    //modApi "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.2.0"))

    // KubeJS
    modImplementation "dev.latvian.mods:kubejs-forge:$rootProject.kubejs_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionForge')) { transitive = false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand mod_id: project.mod_id, version: project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
